{"version":3,"sources":["logo.svg","components/card/index.js","components/NavBar/index.js","components/container/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","data","map","src","image","style","width","height","alt","onClick","handleSubmit","id","NavBar","href","score","topScore","Container","children","App","state","dogs","Dogs","originalDogs","userClickId","newDogs","dog","undefined","clicked","setState","original","sort","Math","random","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"woBAAAA,EAAOC,QAAU,IAA0B,kC,8ICkB5BC,MAhBf,SAAeC,GAGX,OACE,yBAAKC,UAAU,OAEXD,EAAME,KAAKC,KAAI,SAAAD,GACJ,OAAS,yBAAKD,UAAU,iBACzB,yBAAKA,UAAU,eAAeG,IAAKF,EAAKG,MAAOC,MAAO,CAACC,MAAO,IAAKC,OAAQ,KAAMC,IAAI,iBAAiBC,QAAS,kBAAIV,EAAMW,aAAaT,EAAKU,a,MCW/IC,MAnBhB,SAAiBb,GAGb,OACE,wBAAIC,UAAU,8BAClB,wBAAIA,UAAU,YACZ,uBAAGA,UAAU,oBAAoBa,KAAK,KAAtC,6BAEF,wBAAIb,UAAU,YACZ,uBAAGA,UAAU,WAAWa,KAAK,KAA7B,SAAwCd,EAAMe,QAEhD,wBAAId,UAAU,YACZ,uBAAGA,UAAU,WAAWa,KAAK,KAA7B,aAA4Cd,EAAMgB,a,aCEvCC,MAdf,SAAoBjB,GACpB,OACA,yBAAKC,UAAU,aAAaD,EAAMkB,WCgEnBC,E,4MA1DbC,MAAM,CACJL,MAAM,EACNC,SAAS,EACTK,KAAKC,EACLC,aAAcD,G,EAEhBX,aAAe,SAAAa,GACX,IAAIC,EAAU,EAAKL,MAAMC,KAAKlB,KAAK,SAAAuB,GAa/B,OAZGF,IAAcE,EAAId,UACMe,IAAjBD,EAAIE,SACL,EAAKC,SAAS,CAACd,MAAM,EAAKK,MAAML,MAAM,IACnC,EAAKK,MAAML,OAAO,EAAKK,MAAMJ,UAC/B,EAAKa,SAAS,CAACb,SAAS,EAAKI,MAAMJ,SAAS,IAE5CU,EAAIE,SAAU,GAGhB,EAAKC,SAAS,CAACd,MAAM,KAGtBW,KAGT,GAAuB,IAAnB,EAAKN,MAAML,MAAU,CACzB,IAAMe,EAAW,EAAKV,MAAMG,aAAaQ,MAAK,kBAAIC,KAAKC,SAAS,MAC9D,EAAKJ,SAAS,CAACR,KAAKS,SAEpBL,EAAUA,EAAQM,MAAK,kBAAIC,KAAKC,SAAS,MACzC,EAAKJ,SAAS,CAACR,KAAKI,K,uDAO5B,OACE,oCACD,kBAAC,EAAD,KACK,kBAAC,EAAD,CAAQV,MAAOmB,KAAKd,MAAML,MAAOC,SAAUkB,KAAKd,MAAMJ,WACtD,kBAAC,EAAD,CAAMd,KAAMgC,KAAKd,MAAMC,KAAMV,aAAcuB,KAAKvB,qB,GAzCtCwB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e5ebd94a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nfunction Card (props){\n\n\n    return ( \n      <div className=\"row\">\n          {\n          props.data.map(data=>{\n                     return ( <div className=\"card col-sm-3\" >\n                    <img className=\"card-img-top\" src={data.image} style={{width: 200, height: 200}} alt=\"Card image cap\" onClick={()=>props.handleSubmit(data.id)}/>\n                    </div>)\n          })}\n       \n      </div>)\n       \n    }\n\nexport default Card;","import React from \"react\"\nimport \"./index.css\"\nfunction NavBar (props)\n {\n\n    return (\n      <ul className=\"nav justify-content-center\"  >\n  <li className=\"nav-item\">\n    <a className=\"nav-link disabled\" href=\"#\">Cliky Game- Find a Hound</a>\n  </li>\n  <li className=\"nav-item\">\n    <a className=\"nav-link\" href=\"#\">Score:{props.score}</a>\n  </li>\n  <li className=\"nav-item\">\n    <a className=\"nav-link\" href=\"#\">Top Score:{props.topScore}</a>\n  </li>\n\n</ul>\n    )\n }\n\n export default NavBar","import React from \"react\";\nimport \"./index.css\"\nfunction Container (props){\nreturn (\n<div className=\"container\">{props.children}</div>\n\n\n\n\n)\n\n\n\n\n}\n\nexport default Container;","import React,{Component} from 'react';\nimport logo from './logo.svg';\n// import './App.css';\nimport Card from \"./components/card\"\nimport NavBar from \"./components/NavBar\"\n;\nimport Dogs from \"./data/data.json\";\nimport Container from './components/container';\nclass App extends Component {\n\n  state={\n    score:0,\n    topScore:0,\n    dogs:Dogs,\n    originalDogs: Dogs\n  }\n  handleSubmit = userClickId=>{\n      let newDogs = this.state.dogs.map (dog=>{\n          if(userClickId===dog.id){\n                 if(dog.clicked  === undefined){\n                   this.setState({score:this.state.score+1})\n                   if(this.state.score>=this.state.topScore){\n                    this.setState({topScore:this.state.topScore+1 })\n                   }\n                    dog.clicked = true;\n\n                 }  else {\n                  this.setState({score:0})\n                 }   \n          }\n          return dog\n        })\n      \n        if (this.state.score===0){\n        const original = this.state.originalDogs.sort(()=>Math.random()-0.5)\n          this.setState({dogs:original});\n        } else {\n          newDogs = newDogs.sort(()=>Math.random()-0.5)\n          this.setState({dogs:newDogs})\n        }\n\n       \n  }\n\nrender (){\n  return (\n    <>\n   <Container>\n        <NavBar score={this.state.score} topScore={this.state.topScore}/>\n        <Card data={this.state.dogs} handleSubmit={this.handleSubmit}/>\n\n       \n   </Container>\n    {/* <Container>\n    Hi this is phil\n  </Container>\n  <Container>\n    Hi this is christina\n  </Container> */}\n\n  </>\n  );\n\n}\n\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}